name: Test Setup drun Action

on:
  push:
    branches: [ main, master ]
    paths:
      - 'action.yml'
      - '.github/workflows/test-action.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'action.yml'
      - '.github/workflows/test-action.yml'
  workflow_dispatch:

jobs:
  test-platforms:
    name: Test on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Test setup drun (latest)
        uses: ./
        id: setup-latest
        with:
          version: 'latest'
      
      - name: Verify drun installation
        shell: bash
        run: |
          echo "Testing drun installation..."
          
          # Check if drun is in PATH
          if ! command -v drun >/dev/null 2>&1; then
            echo "❌ drun not found in PATH"
            exit 1
          fi
          
          # Check version
          echo "✅ drun found in PATH"
          drun --version
          
          # Verify outputs
          echo "📊 Action outputs:"
          echo "  Version: ${{ steps.setup-latest.outputs.version }}"
          echo "  Path: ${{ steps.setup-latest.outputs.path }}"
          echo "  Cache hit: ${{ steps.setup-latest.outputs.cache-hit }}"
          
          # Test basic functionality
          echo "🧪 Testing basic functionality..."
          drun --help >/dev/null
          echo "✅ drun --help works"
      
      - name: Test with example drun file
        shell: bash
        run: |
          # Create a simple test drun file in correct location
          mkdir -p .drun
          cat > .drun/spec.drun << 'EOF'
          # Simple test drun file
          version: 2.0
          
          project "test-project" version "1.0":
            set platform to "${{ matrix.os }}"
          
          task "hello" means "Say hello from drun":
            info "Hello from drun on {$globals.platform}! 👋"
          
          task "version" means "Show drun version":
            run "drun --version"
          EOF
          
          echo "🧪 Testing drun execution..."
          drun hello
          drun version

  test-versions:
    name: Test version ${{ matrix.version }} on Ubuntu
    strategy:
      fail-fast: false
      matrix:
        version: ['latest']  # Add specific versions here when available
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Test setup drun (${{ matrix.version }})
        uses: ./
        id: setup-version
        with:
          version: ${{ matrix.version }}
      
      - name: Verify installation
        run: |
          echo "Testing drun ${{ matrix.version }}..."
          drun --version
          echo "✅ Version test passed"

  test-caching:
    name: Test caching functionality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: First installation (should download)
        uses: ./
        id: first-install
        with:
          version: 'latest'
          cache: 'true'
      
      - name: Verify first installation
        run: |
          echo "First install cache hit: ${{ steps.first-install.outputs.cache-hit }}"
          drun --version
      
      - name: Second installation (should use cache)
        uses: ./
        id: second-install
        with:
          version: 'latest'
          cache: 'true'
      
      - name: Verify caching worked
        run: |
          echo "Second install cache hit: ${{ steps.second-install.outputs.cache-hit }}"
          drun --version
          
          # Note: Cache hit might still be false on first run due to GitHub Actions cache behavior
          echo "✅ Caching test completed"

  test-no-cache:
    name: Test without caching
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Install without cache
        uses: ./
        id: no-cache
        with:
          version: 'latest'
          cache: 'false'
      
      - name: Verify installation
        run: |
          echo "Cache disabled - cache hit: ${{ steps.no-cache.outputs.cache-hit }}"
          drun --version
          echo "✅ No-cache test passed"

  test-custom-token:
    name: Test with custom token
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Install with custom token
        uses: ./
        id: custom-token
        with:
          version: 'latest'
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify installation
        run: |
          drun --version
          echo "✅ Custom token test passed"

  integration-test:
    name: Integration test with real drun workflow
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Setup drun
        uses: ./
        with:
          version: 'latest'
      
      - name: Create comprehensive test workflow
        run: |
          mkdir -p .drun
          cat > .drun/spec.drun << 'EOF'
          # Integration test drun file
          version: 2.0
          
          project "integration-test" version "1.0":
            set test_dir to "test-output"
          
          task "setup" means "Setup test environment":
            info "Setting up test environment..."
            run "mkdir -p {$globals.test_dir}"
            run "echo 'Setup complete' > {$globals.test_dir}/setup.txt"
            success "Setup complete"
          
          task "test" means "Run tests":
            depends on setup
            
            info "Running tests..."
            run "if [ -f {$globals.test_dir}/setup.txt ]; then echo '✅ Setup dependency worked'; echo 'Test passed' > {$globals.test_dir}/test.txt; else echo '❌ Setup dependency failed'; exit 1; fi"
            success "Tests completed"
          
          task "build" means "Build application":
            depends on test
            
            info "Building application..."
            run "echo 'Build complete' > {$globals.test_dir}/build.txt"
            success "Build successful"
          
          task "cleanup" means "Clean up test files":
            info "Cleaning up..."
            run "rm -rf {$globals.test_dir}"
            success "Cleanup complete"
          
          task "all" means "Run all tasks":
            depends on build, cleanup
            
            info "All tasks completed successfully!"
          EOF
      
      - name: Run integration test
        run: |
          echo "🚀 Running integration test..."
          drun all
          echo "✅ Integration test passed!"

  summary:
    name: Test Summary
    needs: [test-platforms, test-versions, test-caching, test-no-cache, test-custom-token, integration-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test-platforms.result }}" == "success" ]]; then
            echo "✅ Platform tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Platform tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test-versions.result }}" == "success" ]]; then
            echo "✅ Version tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Version tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test-caching.result }}" == "success" ]]; then
            echo "✅ Caching tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Caching tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test-no-cache.result }}" == "success" ]]; then
            echo "✅ No-cache tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No-cache tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test-custom-token.result }}" == "success" ]]; then
            echo "✅ Custom token tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Custom token tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.integration-test.result }}" == "success" ]]; then
            echo "✅ Integration tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 Setup drun GitHub Action testing completed!" >> $GITHUB_STEP_SUMMARY